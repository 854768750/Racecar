<?xml version="1.0"?>

<robot name="racecar" xmlns:xacro="http://www.ros.org/wiki/xacro">

<!-- Loading parameters.yaml file. Use as a python dictionary -->
<xacro:property name="configParam" value ="${load_yaml('$(find racecar_description)/config/parameters.yaml')}"/>



<!-- Gazebo references -->

<gazebo reference="chassis">
  <mu1 value="0.0"/>
  <mu2 value="0.0"/>
  <kp  value="10000000.0" />
  <kd  value="1.0" />
  <material>Gazebo/Blue</material>
</gazebo>

<gazebo reference="left_rear_wheel">
  <mu1 value="1.0"/>
  <mu2 value="1.0"/>
  <kp  value="10000000.0" />
  <kd  value="1.0" />
  <fdir1 value="1 0 0"/>
  <material>Gazebo/Black</material>
</gazebo>

<gazebo reference="right_rear_wheel">
  <mu1 value="1.0"/>
  <mu2 value="1.0"/>
  <kp  value="10000000.0" />
  <kd  value="1.0" />
  <fdir1 value="1 0 0"/>
  <material>Gazebo/Black</material>
</gazebo>

<gazebo reference="left_front_wheel">
  <mu1 value="1.0"/>
  <mu2 value="1.0"/>
  <kp  value="10000000.0" />
  <kd  value="1.0" />
  <fdir1 value="0 0 1"/>
  <material>Gazebo/Black</material>
</gazebo>

<gazebo reference="right_front_wheel">
  <mu1 value="1.0"/>
  <mu2 value="1.0"/>
  <kp  value="10000000.0" />
  <kd  value="1.0" />
  <fdir1 value="0 0 1"/>
  <material>Gazebo/Black</material>
</gazebo>

<!-- Gazebo plugins -->

<gazebo>
  <plugin name="gazebo_ros_control" filename="libgazebo_ros_control.so">
    <robotNamespace>/racecar</robotNamespace>
    <robotSimType>gazebo_ros_control/DefaultRobotHWSim</robotSimType>
  </plugin>
</gazebo>

  <!-- hokuyo -->
<xacro:unless value="$(optenv DISABLE_GAZEBO_LASER false)">
  <gazebo reference="laser">
    <material>Gazebo/Grey</material>
    <sensor type="ray" name="hokuyo_sensor">
      <pose>0 0 0.0124 0 0 0</pose>
      <visualize> ${configParam['Lidar']['visualize']} </visualize>      
      <update_rate>${configParam['Lidar']['update_rate']}</update_rate>
      <ray>
        <scan>
          <horizontal>
            <samples>${configParam['Lidar']['samples']}</samples>
            <resolution>${configParam['Lidar']['resolution']}</resolution>
            <min_angle>${configParam['Lidar']['min_angle']}</min_angle>
            <max_angle>${configParam['Lidar']['max_angle']}</max_angle>
          </horizontal>
        </scan>
        <range>
          <min>${configParam['Lidar']['range_min']}</min>
          <max>${configParam['Lidar']['range_max']}</max>
          <resolution>${configParam['Lidar']['range_resolution']}</resolution>
        </range>
        <noise>
          <mean>${configParam['Lidar']['noise_mean']}</mean>
          <stddev>${configParam['Lidar']['noise_stddev']}</stddev>
        </noise>

      </ray>
      <plugin name="gazebo_ros_hokuyo_controller" filename="libgazebo_ros_laser.so">
        <topicName>/scan</topicName>
        <frameName>laser</frameName>
      </plugin>
    </sensor>
  </gazebo>
</xacro:unless>

<!-- zed camera -->
<xacro:unless value="$(optenv DISABLE_GAZEBO_CAMERA false)">
  <gazebo reference="camera_link">
    <sensor type="camera" name="zed_camera_left_sensor">
      <update_rate>${configParam['Zed']['update_rate']}</update_rate>
      <!-- math.atan(320 / 687.8065795898438) * 2 -->
      <camera name="zed_camera_left_camera">
        <horizontal_fov>0.8709216071359963</horizontal_fov>
        <image>
          <width>${configParam['Zed']['image_w']}</width>
          <height>${configParam['Zed']['image_h']}</height>
          <format>B8G8R8</format>
        </image>
        <clip>
          <near>${configParam['Zed']['clip_near']}</near>
          <far>${configParam['Zed']['clip_far']}</far>
        </clip>
        <noise>
          <type>gaussian</type>
          <mean>${configParam['Zed']['noise_mean']}</mean>
          <stddev>${configParam['Zed']['noise_stddev']}</stddev>
        </noise>
      </camera>
      <plugin name="camera_controller" filename="libgazebo_ros_camera.so">
        <alwaysOn>true</alwaysOn>
        <updateRate>${configParam['Zed']['cam_controller_update_rate']}</updateRate>
        <cameraName>/camera/zed</cameraName>
        <imageTopicName>rgb/image_rect_color</imageTopicName>
        <cameraInfoTopicName>rgb/camera_info</cameraInfoTopicName>
        <frameName>camera_link</frameName>
        <hackBaseline>0</hackBaseline><!-- set this to 0.12 for the second camera -->
        <distortionK1>0.0</distortionK1>
        <distortionK2>0.0</distortionK2>
        <distortionK3>0.0</distortionK3>
        <distortionT1>0.0</distortionT1>
        <distortionT2>0.0</distortionT2>
      </plugin>
    </sensor>
  </gazebo>
</xacro:unless>

<!-- IMU -->

  <gazebo>
    <plugin name="imu_plugin" filename="libgazebo_ros_imu.so">
      <alwaysOn>${configParam['IMU']['alwaysOn']}</alwaysOn>
      <bodyName>imu_link</bodyName>
      <topicName>imu</topicName>
      <serviceName>imu_service</serviceName>
      <gaussianNoise>${configParam['IMU']['gaussian_noise']}</gaussianNoise>
      <updateRate>${configParam['IMU']['update_rate']}</updateRate>
    </plugin>
  </gazebo>

</robot>
